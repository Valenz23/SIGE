knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data_raw <- read_csv('train.csv')
head(data_raw)
data_disc <-
data_raw %>%
mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No'))) %>%
mutate(Fare_Interval = case_when(
Fare >= 30 ~ 'More.than.30',
Fare >= 20 & Fare < 30 ~ 'Between.20.30',
Fare < 20  & Fare >= 10 ~ 'Between.10.20',
Fare < 10 ~ 'Less.than.10')) %>%
mutate(Age_Interval = case_when(
Age <= 18 ~ 'Less.than.18',
Age > 18 & Age <= 35 ~ 'Between.18.35',
Age > 35 & Age <= 55 ~ 'Between.35.55',
Age > 55 ~ 'More.than.55')) %>%
select(Survived, Sex, Fare_Interval, Age_Interval, Pclass, SibSp) %>%
na.exclude()
library(caret)
library(pROC)
set.seed(0)
# Particiones de datos y parametros generales
trainIndex       <- createDataPartition(data_disc$Survived, p = .7, list = FALSE, times = 1)
rfCtrl           <- trainControl(verboseIter = F, classProbs = TRUE, summaryFunction = twoClassSummary)
data <-
data_raw %>%
mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No'))) %>%
select(Survived, Sex, Fare, Age, Pclass, SibSp) %>%
na.exclude()
train <- data[trainIndex, ]
val   <- data[-trainIndex, ]
rfParametersGrid <- expand.grid(.mtry = c(1, sqrt(ncol(train)), 3, 4))
start_time = Sys.time()  # midiendo tiempo
rfModel_1 <- train(Survived ~ ., data = train, method = "rf", metric = "ROC", trControl = rfCtrl, tuneGrid = rfParametersGrid)
end_time = Sys.time()
predictionValidationProb_1 <- predict(rfModel_1, val, type = "prob")
auc_1 <- roc(val$Survived, predictionValidationProb_1[["Yes"]], levels = unique(val[["Survived"]]))
time_1 <- end_time - start_time
train <- data_disc[trainIndex, ]
val   <- data_disc[-trainIndex, ]
start_time = Sys.time()   # midiendo tiempo
rfModel_2 <- train(Survived ~ ., data = train, method = "rf", metric = "ROC", trControl = rfCtrl)
end_time = Sys.time()
predictionValidationProb_2 <- predict(rfModel_2, val, type = "prob")
auc_2 <- roc(val$Survived, predictionValidationProb_2[["Yes"]], levels = unique(val[["Survived"]]))
time_2 <- end_time - start_time
plot.roc(auc_1, ylim=c(0,1), type = "S", col="#1c61b6")
lines.roc(auc_2, type = "S", col="#008600")
cat("Tiempo sin discretizar: ", time_1, "\nTiempo discretizando: ", time_2)
library(arules)
# Discretizar una variable
disc <- discretize(data_raw$Fare, method="frequency", labels = NULL)
knitr::kable(head(disc))
data_disc_2 <-
data_raw %>%
mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No'))) %>%
mutate(Fare_Interval = discretize(Fare, method="cluster")) %>%
mutate(Age_Interval  = discretize(Age, method="cluster")) %>%
select(Survived, Sex, Fare_Interval, Age_Interval, Pclass, SibSp) %>%
na.exclude()
train <- data_disc_2[trainIndex, ]
val   <- data_disc_2[-trainIndex, ]
start_time = Sys.time()   # midiendo tiempo
rfModel_3 <- train(Survived ~ ., data = train, method = "rf", metric = "ROC", trControl = rfCtrl)
end_time = Sys.time()
predictionValidationProb_3 <- predict(rfModel_3, val, type = "prob")
auc_3 <- roc(val$Survived, predictionValidationProb_3[["Yes"]], levels = unique(val[["Survived"]]))
time_3 <- end_time - start_time
plot.roc(auc_1, ylim=c(0,1), type = "S", col="#1c61b6")
lines.roc(auc_2, type = "S", col="#008600")
lines.roc(auc_3, type = "S", col="#DC143C")
# leyenda de curva ROC
legend("bottomright",
legend = c("Sin discretizar", "Discretizacion manual", "Discretizacion automatica"),
col = c("#1c61b6", "#008600", "#DC143C"),
lty = c(1, 1, 1),   # tipo de linea
lwd = c(1, 1, 1))   # grosor de linea
legend <- c("Sin discretizar", "Discretizando manual", "Discretizando automatica")
times  <- c(time_1, time_2, time_3)
aucs   <- c(auc_1$auc, auc_2$auc, auc_3$auc)
knitr::kable(data.frame(legend, times, aucs))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data_raw <- read_csv('train.csv')
head(data_raw)
data_disc <-
data_raw %>%
mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No'))) %>%
mutate(Fare_Interval = case_when(
Fare >= 30 ~ 'More.than.30',
Fare >= 20 & Fare < 30 ~ 'Between.20.30',
Fare < 20  & Fare >= 10 ~ 'Between.10.20',
Fare < 10 ~ 'Less.than.10')) %>%
mutate(Age_Interval = case_when(
Age <= 18 ~ 'Less.than.18',
Age > 18 & Age <= 35 ~ 'Between.18.35',
Age > 35 & Age <= 55 ~ 'Between.35.55',
Age > 55 ~ 'More.than.55')) %>%
select(Survived, Sex, Fare_Interval, Age_Interval, Pclass, SibSp) %>%
na.exclude()
library(caret)
library(pROC)
set.seed(0)
# Particiones de datos y parametros generales
trainIndex       <- createDataPartition(data_disc$Survived, p = .7, list = FALSE, times = 1)
rfCtrl           <- trainControl(verboseIter = F, classProbs = TRUE, summaryFunction = twoClassSummary)
data <-
data_raw %>%
mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No'))) %>%
select(Survived, Sex, Fare, Age, Pclass, SibSp) %>%
na.exclude()
train <- data[trainIndex, ]
val   <- data[-trainIndex, ]
rfParametersGrid <- expand.grid(.mtry = c(1, sqrt(ncol(train)), 3, 4))
start_time = Sys.time()  # midiendo tiempo
rfModel_1 <- train(Survived ~ ., data = train, method = "rf", metric = "ROC", trControl = rfCtrl, tuneGrid = rfParametersGrid)
end_time = Sys.time()
predictionValidationProb_1 <- predict(rfModel_1, val, type = "prob")
auc_1 <- roc(val$Survived, predictionValidationProb_1[["Yes"]], levels = unique(val[["Survived"]]))
time_1 <- end_time - start_time
train <- data_disc[trainIndex, ]
val   <- data_disc[-trainIndex, ]
start_time = Sys.time()   # midiendo tiempo
rfModel_2 <- train(Survived ~ ., data = train, method = "rf", metric = "ROC", trControl = rfCtrl)
end_time = Sys.time()
predictionValidationProb_2 <- predict(rfModel_2, val, type = "prob")
auc_2 <- roc(val$Survived, predictionValidationProb_2[["Yes"]], levels = unique(val[["Survived"]]))
time_2 <- end_time - start_time
plot.roc(auc_1, ylim=c(0,1), type = "S", col="#1c61b6")
lines.roc(auc_2, type = "S", col="#008600")
cat("Tiempo sin discretizar: ", time_1, "\nTiempo discretizando: ", time_2)
library(arules)
# Discretizar una variable
disc <- discretize(data_raw$Fare, method="frequency", labels = NULL)
knitr::kable(head(disc))
data_disc_2 <-
data_raw %>%
mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No'))) %>%
mutate(Fare_Interval = discretize(Fare, method="cluster")) %>%
mutate(Age_Interval  = discretize(Age, method="cluster")) %>%
select(Survived, Sex, Fare_Interval, Age_Interval, Pclass, SibSp) %>%
na.exclude()
train <- data_disc_2[trainIndex, ]
val   <- data_disc_2[-trainIndex, ]
start_time = Sys.time()   # midiendo tiempo
rfModel_3 <- train(Survived ~ ., data = train, method = "rf", metric = "ROC", trControl = rfCtrl)
end_time = Sys.time()
predictionValidationProb_3 <- predict(rfModel_3, val, type = "prob")
auc_3 <- roc(val$Survived, predictionValidationProb_3[["Yes"]], levels = unique(val[["Survived"]]))
time_3 <- end_time - start_time
plot.roc(auc_1, ylim=c(0,1), type = "S", col="#1c61b6")
lines.roc(auc_2, type = "S", col="#008600")
lines.roc(auc_3, type = "S", col="#DC143C")
# leyenda de curva ROC
legend("bottomright",
legend = c("Sin discretizar", "Discretizacion manual", "Discretizacion automatica"),
col = c("#1c61b6", "#008600", "#DC143C"),
lty = c(1, 1, 1),   # tipo de linea
lwd = c(1, 1, 1))   # grosor de linea
legend <- c("Sin discretizar", "Discretizando manual", "Discretizando automatica")
times  <- c(time_1, time_2, time_3)
aucs   <- c(auc_1$auc, auc_2$auc, auc_3$auc)
knitr::kable(data.frame(legend, times, aucs))
