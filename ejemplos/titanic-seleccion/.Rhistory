install.packages("caret")
install.packages("tidyverse")
library(tidyverse)
data_raw <- read.csv('train.csv')
ls
data_raw <- read.csv('train.csv')
print(getwd())
setwd("C:/Repositorios/SIGE/ejemplos/titanic-seleccion/")
data_raw <- read.csv('train.csv')
View(data_raw)
View(data_raw)
head(data_raw)
head(data_raw)
data <- data_raw %>%
data <- data_raw %>% mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No')))
data <-
data_raw %>%
mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No')))
View(data)
View(data_raw)
View(data)
View(data)
View(data)
View(data_raw)
View(data_raw)
data <-
data_raw %>%
mutate(Survived = as.factor(ifelse(Survived == 1, 'Yes', 'No'))) %>%
mutate(Pclass = as.factor(Pclass)) %>%
select(Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked) %>%
na.exclude()
View(data)
View(data_raw)
rpartCtrl <- trainControl(verboseIter = F, classProbs = TRUE, summaryFunction = twoClassSummary)
library(caret)
rpartCtrl <- trainControl(verboseIter = F, classProbs = TRUE, summaryFunction = twoClassSummary)
View(rpartCtrl)
View(rpartCtrl)
rpartParametersGrid <- expand.grid(.cp = c(0.01, 0.05))
trainIndex <- createDataPartition(data$Survived, p = .8, list = FALSE, times = 1)
View(trainIndex)
View(trainIndex)
View(rpartParametersGrid)
View(rpartParametersGrid)
View(rpartCtrl)
View(rpartCtrl)
View(trainIndex)
View(trainIndex)
train <- data[trainIndex, ]
rpartModel <- train(Survived ~ .,
data = train,
method = "rpart",
metric = "ROC",
trControl = rpartCtrl,
tuneGrid = rpartParametersGrid)
rpart.plot(rpartModel$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(rpartModel$finalModel)
rpartCtrl <- trainControl(verboseIter = F, classProbs = TRUE, summaryFunction = twoClassSummary)
rpartParametersGrid <- expand.grid(.cp = c(0.01, 0.05))
# Conjuntos de entrenamiento y validación
trainIndex <- createDataPartition(data$Survived, p = .8, list = FALSE, times = 1)
train <- data[trainIndex, ]
# Entrenamiento del modelo
rpartModel <- train(Survived ~ .,
data = train,
method = "rpart",
metric = "ROC",
trControl = rpartCtrl,
tuneGrid = rpartParametersGrid)
# Visualización del modelo
rpart.plot(rpartModel$finalModel)
View(data_raw)
View(data_raw)
print(rpart.plot(rpartModel$finalModel))
library(rpart)
library(rpart.plot)
rpart.plot(rpartModel$finalModel)
# Instalar e cargar los paquetes necesarios
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
# Crear un modelo de ejemplo (reemplaza esto con tu modelo)
data(iris)
iris_tree <- rpart(Species ~ ., data = iris)
# Crear el gráfico interactivo
rpart.plot(iris_tree)
# Después de ejecutar este código, prueba abrir el visor de gráficos en RStudio
# y deberías ver el gráfico allí.
View(iris)
rpart.plot(rpartModel$finalModel)
val        <- data[-trainIndex, ]
prediction <- predict(rpartModel, val, type = "raw")
# Predicciones con probabilidades
predictionValidationProb <- predict(rpartModel, val, type = "prob")
cm_train <- confusionMatrix(prediction, val[["Survived"]])
cm_train
auc <- roc(val$Survived, predictionValidationProb[["Yes"]], levels = unique(val[["Survived"]]))
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
install.packages("pROC")
auc <- roc(val$Survived, predictionValidationProb[["Yes"]], levels = unique(val[["Survived"]]))
library(pROC)
auc <- roc(val$Survived, predictionValidationProb[["Yes"]], levels = unique(val[["Survived"]]))
View(auc)
View(auc)
roc_validation <- plot.roc(auc,
ylim=c(0,1),
type = "S" ,
print.thres = TRUE,
main=paste('Validation AUC:', round(auc$auc[[1]], 2)))
